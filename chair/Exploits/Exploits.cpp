#pragma once
#include "Exploits.h"
#include "../UserCMD/UserCMD.hpp"


void Rapid_Fire(UserCMD_T* CMD)
{
	if (!Aimbot::RapidFire)
		return;

	if (Delay_Timer(CMD->Buttons.Has(0x80000000) , cfg::Exploits::Rapid_fire::Shot_Delay))
		return;

	WeaponFireType_T WeaponType = GameCall<WeaponFireType_T>(Offset::WeaponFireType)(&CMD->Weapon, false);
	UserCMD_T* OldCMDD = GetUserCMD(GetCMDNumber() - 1);
	if (OldCMDD->Buttons.Has(0x80000000) && (WeaponType == WEAPON_FIRETYPE_SINGLESHOT || WeaponType == WEAPON_FIRETYPE_BURST))
		CMD->Buttons.Remove(0x80000000);
}

void Auto_Reload(UserCMD_T* CMD) {

	if (!Globals::InGame2)
		return;

	if (!MyClient.Got_Client)
		return;

	PlayerState = (PlayerState_T*)(Offset::CGArray + Offset::PlayerState);
	if (PlayerState == 0ui64)
		return;

	Weapon_T* weapon = GameCall<Weapon_T*>(Offset::WeaponName)(0, MyClient.C_Entity);
	if (weapon == 0ui64)
		return;

	int Ammo = GameCall<int>(Offset::BG_GetAmmoInClipForWeapon)(PlayerState, weapon, false, 0x0);

	int weaponClassIdx = GameCall<int>(Offset::BG_GetWeaponClass)(weapon, false);

	if (cfg::Exploits::Auto_Reload::Stop_When_In_View && cfg::Esp::InFov_Count > 0)
		return;

	if (cfg::Exploits::Auto_Reload::Stop_When_Targeting && m_best_target != -1)
		return;

	if (weaponClassIdx == WEAPCLASS_RIFLE && (cfg::Exploits::Auto_Reload::Bullet_Count_AR > 0)) {
		if (Ammo <= cfg::Exploits::Auto_Reload::Bullet_Count_AR)
			CMD->Buttons.Add(0x2000000);
	}
	else if (weaponClassIdx == WEAPCLASS_SNIPER && (cfg::Exploits::Auto_Reload::Bullet_Count_Sniper > 0)) {
		if (Ammo <= cfg::Exploits::Auto_Reload::Bullet_Count_Sniper)
			CMD->Buttons.Add(0x2000000);
	}
	else if (weaponClassIdx == WEAPCLASS_MG && (cfg::Exploits::Auto_Reload::Bullet_Count_LMG > 0))
	{
		if (Ammo <= cfg::Exploits::Auto_Reload::Bullet_Count_LMG)
			CMD->Buttons.Add(0x2000000);
	}
	else if (weaponClassIdx == WEAPCLASS_SMG && (cfg::Exploits::Auto_Reload::Bullet_Count_SMG > 0))
	{
		if (Ammo <= cfg::Exploits::Auto_Reload::Bullet_Count_SMG)
			CMD->Buttons.Add(0x2000000);
	}
	else if (weaponClassIdx == WEAPCLASS_PISTOL && (cfg::Exploits::Auto_Reload::Bullet_Count_Pistol > 0)) {
		if (Ammo <= cfg::Exploits::Auto_Reload::Bullet_Count_Pistol)
			CMD->Buttons.Add(0x2000000);
	}

}

void Send_Chat_Message(const char* message) {

	DWORD64* ChatManagerConstInstance = GameCall<DWORD64*>(Offset::GetConstInstance)();

	ChatData* m_activeChat = reinterpret_cast<ChatData*>(reinterpret_cast<char*>(ChatManagerConstInstance) + 0x34FE8);
	m_activeChat->type = 4;

	size_t messageLength = strlen(message);
	if (messageLength >= 0x101) {
		return;
	}

	ChatInfo dest;
	strncpy(dest.text, message, sizeof(dest.text) - 1);
	dest.text[sizeof(dest.text) - 1] = '\0';
	dest.size = static_cast<unsigned __int16>(messageLength + 1);

	DWORD64* ChatManagerInstance = GameCall<DWORD64*>(Offset::GetInstance)();

	GameCall<bool>(Offset::SendMessageToChat)(ChatManagerInstance, 0, m_activeChat, &dest, false);
}


void Chat_Spam() {

	if (Delay_Timer(true, cfg::Exploits::Chat_Spam::Delay_Time))
		return;

	if (cfg::Exploits::Chat_Spam::Spam_Message && !std::string(cfg::Exploits::Chat_Spam::Chat_Message).empty()) {
	
		Send_Chat_Message(cfg::Exploits::Chat_Spam::Chat_Message);
	}

}